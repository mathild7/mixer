// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_codeRepl1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        lev0,
        in0_V_TDATA,
        in0_V_TVALID,
        in0_V_TREADY,
        lev1,
        in1_V_TDATA,
        in1_V_TVALID,
        in1_V_TREADY,
        lev2,
        in2_V_TDATA,
        in2_V_TVALID,
        in2_V_TREADY,
        lev3,
        in3_V_TDATA,
        in3_V_TVALID,
        in3_V_TREADY,
        out_V_TDATA,
        out_V_TVALID,
        out_V_TREADY
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_state15 = 23'd16384;
parameter    ap_ST_fsm_state16 = 23'd32768;
parameter    ap_ST_fsm_state17 = 23'd65536;
parameter    ap_ST_fsm_state18 = 23'd131072;
parameter    ap_ST_fsm_state19 = 23'd262144;
parameter    ap_ST_fsm_state20 = 23'd524288;
parameter    ap_ST_fsm_state21 = 23'd1048576;
parameter    ap_ST_fsm_state22 = 23'd2097152;
parameter    ap_ST_fsm_state23 = 23'd4194304;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] lev0;
input  [31:0] in0_V_TDATA;
input   in0_V_TVALID;
output   in0_V_TREADY;
input  [31:0] lev1;
input  [31:0] in1_V_TDATA;
input   in1_V_TVALID;
output   in1_V_TREADY;
input  [31:0] lev2;
input  [31:0] in2_V_TDATA;
input   in2_V_TVALID;
output   in2_V_TREADY;
input  [31:0] lev3;
input  [31:0] in3_V_TDATA;
input   in3_V_TVALID;
output   in3_V_TREADY;
output  [31:0] out_V_TDATA;
output   out_V_TVALID;
input   out_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] in0_V_0_data_out;
wire    in0_V_0_vld_in;
wire    in0_V_0_vld_out;
wire    in0_V_0_ack_in;
reg    in0_V_0_ack_out;
reg   [31:0] in0_V_0_payload_A;
reg   [31:0] in0_V_0_payload_B;
reg    in0_V_0_sel_rd;
reg    in0_V_0_sel_wr;
wire    in0_V_0_sel;
wire    in0_V_0_load_A;
wire    in0_V_0_load_B;
reg   [1:0] in0_V_0_state;
wire    in0_V_0_state_cmp_full;
reg   [31:0] in1_V_0_data_out;
wire    in1_V_0_vld_in;
wire    in1_V_0_vld_out;
wire    in1_V_0_ack_in;
reg    in1_V_0_ack_out;
reg   [31:0] in1_V_0_payload_A;
reg   [31:0] in1_V_0_payload_B;
reg    in1_V_0_sel_rd;
reg    in1_V_0_sel_wr;
wire    in1_V_0_sel;
wire    in1_V_0_load_A;
wire    in1_V_0_load_B;
reg   [1:0] in1_V_0_state;
wire    in1_V_0_state_cmp_full;
reg   [31:0] in2_V_0_data_out;
wire    in2_V_0_vld_in;
wire    in2_V_0_vld_out;
wire    in2_V_0_ack_in;
reg    in2_V_0_ack_out;
reg   [31:0] in2_V_0_payload_A;
reg   [31:0] in2_V_0_payload_B;
reg    in2_V_0_sel_rd;
reg    in2_V_0_sel_wr;
wire    in2_V_0_sel;
wire    in2_V_0_load_A;
wire    in2_V_0_load_B;
reg   [1:0] in2_V_0_state;
wire    in2_V_0_state_cmp_full;
reg   [31:0] in3_V_0_data_out;
wire    in3_V_0_vld_in;
wire    in3_V_0_vld_out;
wire    in3_V_0_ack_in;
reg    in3_V_0_ack_out;
reg   [31:0] in3_V_0_payload_A;
reg   [31:0] in3_V_0_payload_B;
reg    in3_V_0_sel_rd;
reg    in3_V_0_sel_wr;
wire    in3_V_0_sel;
wire    in3_V_0_load_A;
wire    in3_V_0_load_B;
reg   [1:0] in3_V_0_state;
wire    in3_V_0_state_cmp_full;
reg   [31:0] out_V_1_data_out;
reg    out_V_1_vld_in;
wire    out_V_1_vld_out;
wire    out_V_1_ack_in;
wire    out_V_1_ack_out;
reg   [31:0] out_V_1_payload_A;
reg   [31:0] out_V_1_payload_B;
reg    out_V_1_sel_rd;
reg    out_V_1_sel_wr;
wire    out_V_1_sel;
wire    out_V_1_load_A;
wire    out_V_1_load_B;
reg   [1:0] out_V_1_state;
wire    out_V_1_state_cmp_full;
reg    in0_V_TDATA_blk_n;
wire    ap_CS_fsm_state3;
reg   [0:0] or_cond_reg_423;
reg    in1_V_TDATA_blk_n;
wire    ap_CS_fsm_state5;
reg   [0:0] or_cond1_reg_442;
reg    in2_V_TDATA_blk_n;
wire    ap_CS_fsm_state7;
reg   [0:0] or_cond2_reg_461;
reg    in3_V_TDATA_blk_n;
wire    ap_CS_fsm_state9;
reg   [0:0] or_cond3_reg_480;
reg    out_V_TDATA_blk_n;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire   [31:0] grp_fu_156_p2;
reg   [31:0] reg_197;
wire    ap_CS_fsm_state17;
reg    ap_block_state1;
wire   [0:0] grp_fu_185_p2;
reg   [0:0] tmp_9_reg_389;
wire   [0:0] grp_fu_191_p2;
reg   [0:0] tmp_1_reg_394;
wire    ap_CS_fsm_state2;
wire   [0:0] or_cond_fu_242_p2;
reg    ap_block_state3;
reg   [0:0] tmp_12_reg_432;
reg   [0:0] tmp_13_reg_437;
wire   [0:0] or_cond1_fu_287_p2;
wire    ap_CS_fsm_state4;
reg    ap_block_state5;
reg   [0:0] tmp_26_reg_451;
reg   [0:0] tmp_27_reg_456;
wire   [0:0] or_cond2_fu_332_p2;
wire    ap_CS_fsm_state6;
reg    ap_block_state7;
reg   [0:0] tmp_33_reg_470;
reg   [0:0] tmp_34_reg_475;
wire   [0:0] or_cond3_fu_377_p2;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_165_p2;
reg   [31:0] tmp_15_reg_484;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_170_p2;
reg   [31:0] tmp_16_reg_489;
wire   [31:0] grp_fu_175_p2;
reg   [31:0] tmp_18_reg_494;
wire   [31:0] grp_fu_180_p2;
reg   [31:0] tmp_19_reg_499;
wire   [31:0] grp_fu_160_p2;
reg   [31:0] tmp_20_reg_504;
reg   [31:0] tmp_7_reg_107;
reg   [31:0] tmp_s_reg_119;
reg   [31:0] tmp_10_reg_131;
reg   [31:0] tmp_14_phi_fu_147_p4;
reg   [31:0] tmp_14_reg_143;
reg    ap_block_state9;
reg   [31:0] grp_fu_156_p0;
reg   [31:0] grp_fu_156_p1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state18;
reg   [31:0] grp_fu_185_p0;
reg   [31:0] grp_fu_191_p0;
wire   [31:0] lev0_to_int_fu_203_p1;
wire   [7:0] tmp_5_fu_206_p4;
wire   [22:0] tmp_fu_216_p1;
wire   [0:0] notrhs_fu_226_p2;
wire   [0:0] notlhs_fu_220_p2;
wire   [0:0] tmp_8_fu_232_p2;
wire   [0:0] tmp_2_fu_238_p2;
wire   [31:0] lev1_to_int_fu_248_p1;
wire   [7:0] tmp_4_fu_251_p4;
wire   [22:0] tmp_6_fu_261_p1;
wire   [0:0] notrhs2_fu_271_p2;
wire   [0:0] notlhs2_fu_265_p2;
wire   [0:0] tmp_11_fu_277_p2;
wire   [0:0] tmp_21_fu_283_p2;
wire   [31:0] lev2_to_int_fu_293_p1;
wire   [7:0] tmp_23_fu_296_p4;
wire   [22:0] tmp_24_fu_306_p1;
wire   [0:0] notrhs4_fu_316_p2;
wire   [0:0] notlhs4_fu_310_p2;
wire   [0:0] tmp_25_fu_322_p2;
wire   [0:0] tmp_28_fu_328_p2;
wire   [31:0] lev3_to_int_fu_338_p1;
wire   [7:0] tmp_30_fu_341_p4;
wire   [22:0] tmp_31_fu_351_p1;
wire   [0:0] notrhs6_fu_361_p2;
wire   [0:0] notlhs6_fu_355_p2;
wire   [0:0] tmp_32_fu_367_p2;
wire   [0:0] tmp_35_fu_373_p2;
reg    grp_fu_156_ce;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
reg    grp_fu_165_ce;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
reg    grp_fu_170_ce;
reg    grp_fu_175_ce;
reg    grp_fu_180_ce;
reg   [22:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 23'd1;
#0 in0_V_0_sel_rd = 1'b0;
#0 in0_V_0_sel_wr = 1'b0;
#0 in0_V_0_state = 2'd0;
#0 in1_V_0_sel_rd = 1'b0;
#0 in1_V_0_sel_wr = 1'b0;
#0 in1_V_0_state = 2'd0;
#0 in2_V_0_sel_rd = 1'b0;
#0 in2_V_0_sel_wr = 1'b0;
#0 in2_V_0_state = 2'd0;
#0 in3_V_0_sel_rd = 1'b0;
#0 in3_V_0_sel_wr = 1'b0;
#0 in3_V_0_state = 2'd0;
#0 out_V_1_sel_rd = 1'b0;
#0 out_V_1_sel_wr = 1'b0;
#0 out_V_1_state = 2'd0;
end

mixer_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mixer_fadd_32ns_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_156_p0),
    .din1(grp_fu_156_p1),
    .ce(grp_fu_156_ce),
    .dout(grp_fu_156_p2)
);

mixer_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mixer_fadd_32ns_3bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_18_reg_494),
    .din1(tmp_19_reg_499),
    .ce(1'b1),
    .dout(grp_fu_160_p2)
);

mixer_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mixer_fmul_32ns_3cud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_7_reg_107),
    .din1(lev0),
    .ce(grp_fu_165_ce),
    .dout(grp_fu_165_p2)
);

mixer_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mixer_fmul_32ns_3cud_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_s_reg_119),
    .din1(lev1),
    .ce(grp_fu_170_ce),
    .dout(grp_fu_170_p2)
);

mixer_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mixer_fmul_32ns_3cud_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_10_reg_131),
    .din1(lev2),
    .ce(grp_fu_175_ce),
    .dout(grp_fu_175_p2)
);

mixer_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mixer_fmul_32ns_3cud_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_14_phi_fu_147_p4),
    .din1(lev3),
    .ce(grp_fu_180_ce),
    .dout(grp_fu_180_p2)
);

mixer_fcmp_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
mixer_fcmp_32ns_3dEe_U7(
    .din0(grp_fu_185_p0),
    .din1(32'd3175926989),
    .opcode(5'd4),
    .dout(grp_fu_185_p2)
);

mixer_fcmp_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
mixer_fcmp_32ns_3dEe_U8(
    .din0(grp_fu_191_p0),
    .din1(32'd1028443341),
    .opcode(5'd2),
    .dout(grp_fu_191_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state23) & (out_V_1_ack_in == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in0_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == in0_V_0_ack_out) & (1'b1 == in0_V_0_vld_out))) begin
            in0_V_0_sel_rd <= ~in0_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in0_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == in0_V_0_vld_in) & (1'b1 == in0_V_0_ack_in))) begin
            in0_V_0_sel_wr <= ~in0_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in0_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == in0_V_0_vld_in) & (1'b1 == in0_V_0_ack_out) & (in0_V_0_state == 2'd3)) | ((1'b0 == in0_V_0_vld_in) & (in0_V_0_state == 2'd2)))) begin
            in0_V_0_state <= 2'd2;
        end else if ((((1'b1 == in0_V_0_vld_in) & (1'b0 == in0_V_0_ack_out) & (in0_V_0_state == 2'd3)) | ((1'b0 == in0_V_0_ack_out) & (in0_V_0_state == 2'd1)))) begin
            in0_V_0_state <= 2'd1;
        end else if ((((1'b1 == in0_V_0_vld_in) & (in0_V_0_state == 2'd2)) | ((1'b1 == in0_V_0_ack_out) & (in0_V_0_state == 2'd1)) | ((in0_V_0_state == 2'd3) & ~((1'b1 == in0_V_0_vld_in) & (1'b0 == in0_V_0_ack_out)) & ~((1'b0 == in0_V_0_vld_in) & (1'b1 == in0_V_0_ack_out))))) begin
            in0_V_0_state <= 2'd3;
        end else begin
            in0_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in1_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == in1_V_0_ack_out) & (1'b1 == in1_V_0_vld_out))) begin
            in1_V_0_sel_rd <= ~in1_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in1_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == in1_V_0_vld_in) & (1'b1 == in1_V_0_ack_in))) begin
            in1_V_0_sel_wr <= ~in1_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in1_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == in1_V_0_vld_in) & (1'b1 == in1_V_0_ack_out) & (2'd3 == in1_V_0_state)) | ((1'b0 == in1_V_0_vld_in) & (2'd2 == in1_V_0_state)))) begin
            in1_V_0_state <= 2'd2;
        end else if ((((1'b1 == in1_V_0_vld_in) & (1'b0 == in1_V_0_ack_out) & (2'd3 == in1_V_0_state)) | ((1'b0 == in1_V_0_ack_out) & (2'd1 == in1_V_0_state)))) begin
            in1_V_0_state <= 2'd1;
        end else if ((((1'b1 == in1_V_0_vld_in) & (2'd2 == in1_V_0_state)) | ((1'b1 == in1_V_0_ack_out) & (2'd1 == in1_V_0_state)) | ((2'd3 == in1_V_0_state) & ~((1'b1 == in1_V_0_vld_in) & (1'b0 == in1_V_0_ack_out)) & ~((1'b0 == in1_V_0_vld_in) & (1'b1 == in1_V_0_ack_out))))) begin
            in1_V_0_state <= 2'd3;
        end else begin
            in1_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in2_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == in2_V_0_ack_out) & (1'b1 == in2_V_0_vld_out))) begin
            in2_V_0_sel_rd <= ~in2_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in2_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == in2_V_0_vld_in) & (1'b1 == in2_V_0_ack_in))) begin
            in2_V_0_sel_wr <= ~in2_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in2_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == in2_V_0_vld_in) & (1'b1 == in2_V_0_ack_out) & (2'd3 == in2_V_0_state)) | ((1'b0 == in2_V_0_vld_in) & (2'd2 == in2_V_0_state)))) begin
            in2_V_0_state <= 2'd2;
        end else if ((((1'b1 == in2_V_0_vld_in) & (1'b0 == in2_V_0_ack_out) & (2'd3 == in2_V_0_state)) | ((1'b0 == in2_V_0_ack_out) & (2'd1 == in2_V_0_state)))) begin
            in2_V_0_state <= 2'd1;
        end else if ((((1'b1 == in2_V_0_vld_in) & (2'd2 == in2_V_0_state)) | ((1'b1 == in2_V_0_ack_out) & (2'd1 == in2_V_0_state)) | ((2'd3 == in2_V_0_state) & ~((1'b1 == in2_V_0_vld_in) & (1'b0 == in2_V_0_ack_out)) & ~((1'b0 == in2_V_0_vld_in) & (1'b1 == in2_V_0_ack_out))))) begin
            in2_V_0_state <= 2'd3;
        end else begin
            in2_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in3_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == in3_V_0_ack_out) & (1'b1 == in3_V_0_vld_out))) begin
            in3_V_0_sel_rd <= ~in3_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in3_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == in3_V_0_vld_in) & (1'b1 == in3_V_0_ack_in))) begin
            in3_V_0_sel_wr <= ~in3_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in3_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == in3_V_0_vld_in) & (1'b1 == in3_V_0_ack_out) & (2'd3 == in3_V_0_state)) | ((1'b0 == in3_V_0_vld_in) & (2'd2 == in3_V_0_state)))) begin
            in3_V_0_state <= 2'd2;
        end else if ((((1'b1 == in3_V_0_vld_in) & (1'b0 == in3_V_0_ack_out) & (2'd3 == in3_V_0_state)) | ((1'b0 == in3_V_0_ack_out) & (2'd1 == in3_V_0_state)))) begin
            in3_V_0_state <= 2'd1;
        end else if ((((1'b1 == in3_V_0_vld_in) & (2'd2 == in3_V_0_state)) | ((1'b1 == in3_V_0_ack_out) & (2'd1 == in3_V_0_state)) | ((2'd3 == in3_V_0_state) & ~((1'b1 == in3_V_0_vld_in) & (1'b0 == in3_V_0_ack_out)) & ~((1'b0 == in3_V_0_vld_in) & (1'b1 == in3_V_0_ack_out))))) begin
            in3_V_0_state <= 2'd3;
        end else begin
            in3_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == out_V_1_ack_out) & (1'b1 == out_V_1_vld_out))) begin
            out_V_1_sel_rd <= ~out_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == out_V_1_vld_in) & (1'b1 == out_V_1_ack_in))) begin
            out_V_1_sel_wr <= ~out_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == out_V_1_vld_in) & (1'b1 == out_V_1_ack_out) & (2'd3 == out_V_1_state)) | ((1'b0 == out_V_1_vld_in) & (2'd2 == out_V_1_state)))) begin
            out_V_1_state <= 2'd2;
        end else if ((((1'b1 == out_V_1_vld_in) & (1'b0 == out_V_1_ack_out) & (2'd3 == out_V_1_state)) | ((1'b0 == out_V_1_ack_out) & (2'd1 == out_V_1_state)))) begin
            out_V_1_state <= 2'd1;
        end else if ((((1'b1 == out_V_1_vld_in) & (2'd2 == out_V_1_state)) | ((1'b1 == out_V_1_ack_out) & (2'd1 == out_V_1_state)) | ((2'd3 == out_V_1_state) & ~((1'b1 == out_V_1_vld_in) & (1'b0 == out_V_1_ack_out)) & ~((1'b0 == out_V_1_vld_in) & (1'b1 == out_V_1_ack_out))))) begin
            out_V_1_state <= 2'd3;
        end else begin
            out_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == or_cond2_fu_332_p2))) begin
        tmp_10_reg_131 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == or_cond2_reg_461) & ~((1'd1 == or_cond2_reg_461) & (1'b0 == in2_V_0_vld_out)))) begin
        tmp_10_reg_131 <= in2_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == or_cond3_fu_377_p2))) begin
        tmp_14_reg_143 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == or_cond3_reg_480) & ~((1'd1 == or_cond3_reg_480) & (1'b0 == in3_V_0_vld_out)))) begin
        tmp_14_reg_143 <= in3_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == or_cond_fu_242_p2))) begin
        tmp_7_reg_107 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == or_cond_reg_423) & ~((1'd1 == or_cond_reg_423) & (1'b0 == in0_V_0_vld_out)))) begin
        tmp_7_reg_107 <= in0_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == or_cond1_fu_287_p2))) begin
        tmp_s_reg_119 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == or_cond1_reg_442) & ~((1'd1 == or_cond1_reg_442) & (1'b0 == in1_V_0_vld_out)))) begin
        tmp_s_reg_119 <= in1_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in0_V_0_load_A)) begin
        in0_V_0_payload_A <= in0_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in0_V_0_load_B)) begin
        in0_V_0_payload_B <= in0_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in1_V_0_load_A)) begin
        in1_V_0_payload_A <= in1_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in1_V_0_load_B)) begin
        in1_V_0_payload_B <= in1_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in2_V_0_load_A)) begin
        in2_V_0_payload_A <= in2_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in2_V_0_load_B)) begin
        in2_V_0_payload_B <= in2_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in3_V_0_load_A)) begin
        in3_V_0_payload_A <= in3_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in3_V_0_load_B)) begin
        in3_V_0_payload_B <= in3_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        or_cond1_reg_442 <= or_cond1_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        or_cond2_reg_461 <= or_cond2_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        or_cond3_reg_480 <= or_cond3_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        or_cond_reg_423 <= or_cond_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out_V_1_load_A)) begin
        out_V_1_payload_A <= grp_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out_V_1_load_B)) begin
        out_V_1_payload_B <= grp_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) | ((1'b1 == ap_CS_fsm_state22) & (out_V_1_ack_in == 1'b1)))) begin
        reg_197 <= grp_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((1'd1 == or_cond_reg_423) & (1'b0 == in0_V_0_vld_out)))) begin
        tmp_12_reg_432 <= grp_fu_185_p2;
        tmp_13_reg_437 <= grp_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_15_reg_484 <= grp_fu_165_p2;
        tmp_16_reg_489 <= grp_fu_170_p2;
        tmp_18_reg_494 <= grp_fu_175_p2;
        tmp_19_reg_499 <= grp_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        tmp_1_reg_394 <= grp_fu_191_p2;
        tmp_9_reg_389 <= grp_fu_185_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_20_reg_504 <= grp_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & ~((1'd1 == or_cond1_reg_442) & (1'b0 == in1_V_0_vld_out)))) begin
        tmp_26_reg_451 <= grp_fu_185_p2;
        tmp_27_reg_456 <= grp_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & ~((1'd1 == or_cond2_reg_461) & (1'b0 == in2_V_0_vld_out)))) begin
        tmp_33_reg_470 <= grp_fu_185_p2;
        tmp_34_reg_475 <= grp_fu_191_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) & (out_V_1_ack_in == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) & (out_V_1_ack_in == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | ((1'b1 == ap_CS_fsm_state22) & (out_V_1_ack_in == 1'b1)) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_fu_156_ce = 1'b1;
    end else begin
        grp_fu_156_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_156_p0 = reg_197;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_156_p0 = tmp_15_reg_484;
    end else begin
        grp_fu_156_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_156_p1 = tmp_20_reg_504;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_156_p1 = tmp_16_reg_489;
    end else begin
        grp_fu_156_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state9) & ~((1'd1 == or_cond3_reg_480) & (1'b0 == in3_V_0_vld_out))) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_165_ce = 1'b1;
    end else begin
        grp_fu_165_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state9) & ~((1'd1 == or_cond3_reg_480) & (1'b0 == in3_V_0_vld_out))) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_170_ce = 1'b1;
    end else begin
        grp_fu_170_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state9) & ~((1'd1 == or_cond3_reg_480) & (1'b0 == in3_V_0_vld_out))) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_175_ce = 1'b1;
    end else begin
        grp_fu_175_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state9) & ~((1'd1 == or_cond3_reg_480) & (1'b0 == in3_V_0_vld_out))) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_180_ce = 1'b1;
    end else begin
        grp_fu_180_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_185_p0 = lev3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_185_p0 = lev2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_185_p0 = lev1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_185_p0 = lev0;
    end else begin
        grp_fu_185_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_191_p0 = lev3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_191_p0 = lev2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_191_p0 = lev1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_191_p0 = lev0;
    end else begin
        grp_fu_191_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == or_cond_reg_423) & ~((1'd1 == or_cond_reg_423) & (1'b0 == in0_V_0_vld_out)))) begin
        in0_V_0_ack_out = 1'b1;
    end else begin
        in0_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == in0_V_0_sel)) begin
        in0_V_0_data_out = in0_V_0_payload_B;
    end else begin
        in0_V_0_data_out = in0_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == or_cond_reg_423))) begin
        in0_V_TDATA_blk_n = in0_V_0_state[1'd0];
    end else begin
        in0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == or_cond1_reg_442) & ~((1'd1 == or_cond1_reg_442) & (1'b0 == in1_V_0_vld_out)))) begin
        in1_V_0_ack_out = 1'b1;
    end else begin
        in1_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == in1_V_0_sel)) begin
        in1_V_0_data_out = in1_V_0_payload_B;
    end else begin
        in1_V_0_data_out = in1_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == or_cond1_reg_442))) begin
        in1_V_TDATA_blk_n = in1_V_0_state[1'd0];
    end else begin
        in1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == or_cond2_reg_461) & ~((1'd1 == or_cond2_reg_461) & (1'b0 == in2_V_0_vld_out)))) begin
        in2_V_0_ack_out = 1'b1;
    end else begin
        in2_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == in2_V_0_sel)) begin
        in2_V_0_data_out = in2_V_0_payload_B;
    end else begin
        in2_V_0_data_out = in2_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == or_cond2_reg_461))) begin
        in2_V_TDATA_blk_n = in2_V_0_state[1'd0];
    end else begin
        in2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == or_cond3_reg_480) & ~((1'd1 == or_cond3_reg_480) & (1'b0 == in3_V_0_vld_out)))) begin
        in3_V_0_ack_out = 1'b1;
    end else begin
        in3_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == in3_V_0_sel)) begin
        in3_V_0_data_out = in3_V_0_payload_B;
    end else begin
        in3_V_0_data_out = in3_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == or_cond3_reg_480))) begin
        in3_V_TDATA_blk_n = in3_V_0_state[1'd0];
    end else begin
        in3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == out_V_1_sel)) begin
        out_V_1_data_out = out_V_1_payload_B;
    end else begin
        out_V_1_data_out = out_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) & (out_V_1_ack_in == 1'b1))) begin
        out_V_1_vld_in = 1'b1;
    end else begin
        out_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state23))) begin
        out_V_TDATA_blk_n = out_V_1_state[1'd1];
    end else begin
        out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == or_cond3_reg_480))) begin
        tmp_14_phi_fu_147_p4 = in3_V_0_data_out;
    end else begin
        tmp_14_phi_fu_147_p4 = tmp_14_reg_143;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & ~((1'd1 == or_cond_reg_423) & (1'b0 == in0_V_0_vld_out)))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & ~((1'd1 == or_cond1_reg_442) & (1'b0 == in1_V_0_vld_out)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & ~((1'd1 == or_cond2_reg_461) & (1'b0 == in2_V_0_vld_out)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & ~((1'd1 == or_cond3_reg_480) & (1'b0 == in3_V_0_vld_out)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (out_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (out_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3 = ((1'd1 == or_cond_reg_423) & (1'b0 == in0_V_0_vld_out));
end

always @ (*) begin
    ap_block_state5 = ((1'd1 == or_cond1_reg_442) & (1'b0 == in1_V_0_vld_out));
end

always @ (*) begin
    ap_block_state7 = ((1'd1 == or_cond2_reg_461) & (1'b0 == in2_V_0_vld_out));
end

always @ (*) begin
    ap_block_state9 = ((1'd1 == or_cond3_reg_480) & (1'b0 == in3_V_0_vld_out));
end

assign in0_V_0_ack_in = in0_V_0_state[1'd1];

assign in0_V_0_load_A = (in0_V_0_state_cmp_full & ~in0_V_0_sel_wr);

assign in0_V_0_load_B = (in0_V_0_sel_wr & in0_V_0_state_cmp_full);

assign in0_V_0_sel = in0_V_0_sel_rd;

assign in0_V_0_state_cmp_full = ((in0_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in0_V_0_vld_in = in0_V_TVALID;

assign in0_V_0_vld_out = in0_V_0_state[1'd0];

assign in0_V_TREADY = in0_V_0_state[1'd1];

assign in1_V_0_ack_in = in1_V_0_state[1'd1];

assign in1_V_0_load_A = (in1_V_0_state_cmp_full & ~in1_V_0_sel_wr);

assign in1_V_0_load_B = (in1_V_0_sel_wr & in1_V_0_state_cmp_full);

assign in1_V_0_sel = in1_V_0_sel_rd;

assign in1_V_0_state_cmp_full = ((in1_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in1_V_0_vld_in = in1_V_TVALID;

assign in1_V_0_vld_out = in1_V_0_state[1'd0];

assign in1_V_TREADY = in1_V_0_state[1'd1];

assign in2_V_0_ack_in = in2_V_0_state[1'd1];

assign in2_V_0_load_A = (in2_V_0_state_cmp_full & ~in2_V_0_sel_wr);

assign in2_V_0_load_B = (in2_V_0_sel_wr & in2_V_0_state_cmp_full);

assign in2_V_0_sel = in2_V_0_sel_rd;

assign in2_V_0_state_cmp_full = ((in2_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in2_V_0_vld_in = in2_V_TVALID;

assign in2_V_0_vld_out = in2_V_0_state[1'd0];

assign in2_V_TREADY = in2_V_0_state[1'd1];

assign in3_V_0_ack_in = in3_V_0_state[1'd1];

assign in3_V_0_load_A = (in3_V_0_state_cmp_full & ~in3_V_0_sel_wr);

assign in3_V_0_load_B = (in3_V_0_sel_wr & in3_V_0_state_cmp_full);

assign in3_V_0_sel = in3_V_0_sel_rd;

assign in3_V_0_state_cmp_full = ((in3_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in3_V_0_vld_in = in3_V_TVALID;

assign in3_V_0_vld_out = in3_V_0_state[1'd0];

assign in3_V_TREADY = in3_V_0_state[1'd1];

assign lev0_to_int_fu_203_p1 = lev0;

assign lev1_to_int_fu_248_p1 = lev1;

assign lev2_to_int_fu_293_p1 = lev2;

assign lev3_to_int_fu_338_p1 = lev3;

assign notlhs2_fu_265_p2 = ((tmp_4_fu_251_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs4_fu_310_p2 = ((tmp_23_fu_296_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs6_fu_355_p2 = ((tmp_30_fu_341_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_220_p2 = ((tmp_5_fu_206_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs2_fu_271_p2 = ((tmp_6_fu_261_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs4_fu_316_p2 = ((tmp_24_fu_306_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs6_fu_361_p2 = ((tmp_31_fu_351_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_226_p2 = ((tmp_fu_216_p1 == 23'd0) ? 1'b1 : 1'b0);

assign or_cond1_fu_287_p2 = (tmp_11_fu_277_p2 & tmp_21_fu_283_p2);

assign or_cond2_fu_332_p2 = (tmp_25_fu_322_p2 & tmp_28_fu_328_p2);

assign or_cond3_fu_377_p2 = (tmp_32_fu_367_p2 & tmp_35_fu_373_p2);

assign or_cond_fu_242_p2 = (tmp_8_fu_232_p2 & tmp_2_fu_238_p2);

assign out_V_1_ack_in = out_V_1_state[1'd1];

assign out_V_1_ack_out = out_V_TREADY;

assign out_V_1_load_A = (out_V_1_state_cmp_full & ~out_V_1_sel_wr);

assign out_V_1_load_B = (out_V_1_sel_wr & out_V_1_state_cmp_full);

assign out_V_1_sel = out_V_1_sel_rd;

assign out_V_1_state_cmp_full = ((out_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_1_vld_out = out_V_1_state[1'd0];

assign out_V_TDATA = out_V_1_data_out;

assign out_V_TVALID = out_V_1_state[1'd0];

assign tmp_11_fu_277_p2 = (notrhs2_fu_271_p2 | notlhs2_fu_265_p2);

assign tmp_21_fu_283_p2 = (tmp_12_reg_432 | tmp_13_reg_437);

assign tmp_23_fu_296_p4 = {{lev2_to_int_fu_293_p1[30:23]}};

assign tmp_24_fu_306_p1 = lev2_to_int_fu_293_p1[22:0];

assign tmp_25_fu_322_p2 = (notrhs4_fu_316_p2 | notlhs4_fu_310_p2);

assign tmp_28_fu_328_p2 = (tmp_26_reg_451 | tmp_27_reg_456);

assign tmp_2_fu_238_p2 = (tmp_9_reg_389 | tmp_1_reg_394);

assign tmp_30_fu_341_p4 = {{lev3_to_int_fu_338_p1[30:23]}};

assign tmp_31_fu_351_p1 = lev3_to_int_fu_338_p1[22:0];

assign tmp_32_fu_367_p2 = (notrhs6_fu_361_p2 | notlhs6_fu_355_p2);

assign tmp_35_fu_373_p2 = (tmp_33_reg_470 | tmp_34_reg_475);

assign tmp_4_fu_251_p4 = {{lev1_to_int_fu_248_p1[30:23]}};

assign tmp_5_fu_206_p4 = {{lev0_to_int_fu_203_p1[30:23]}};

assign tmp_6_fu_261_p1 = lev1_to_int_fu_248_p1[22:0];

assign tmp_8_fu_232_p2 = (notrhs_fu_226_p2 | notlhs_fu_220_p2);

assign tmp_fu_216_p1 = lev0_to_int_fu_203_p1[22:0];

endmodule //Block_codeRepl1_proc
