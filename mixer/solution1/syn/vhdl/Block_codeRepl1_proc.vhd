-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Block_codeRepl1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    lev0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in0_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in0_V_TVALID : IN STD_LOGIC;
    in0_V_TREADY : OUT STD_LOGIC;
    lev1 : IN STD_LOGIC_VECTOR (31 downto 0);
    in1_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in1_V_TVALID : IN STD_LOGIC;
    in1_V_TREADY : OUT STD_LOGIC;
    lev2 : IN STD_LOGIC_VECTOR (31 downto 0);
    in2_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in2_V_TVALID : IN STD_LOGIC;
    in2_V_TREADY : OUT STD_LOGIC;
    lev3 : IN STD_LOGIC_VECTOR (31 downto 0);
    in3_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in3_V_TVALID : IN STD_LOGIC;
    in3_V_TREADY : OUT STD_LOGIC;
    out_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_V_TVALID : OUT STD_LOGIC;
    out_V_TREADY : IN STD_LOGIC );
end;


architecture behav of Block_codeRepl1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_BD4CCCCD : STD_LOGIC_VECTOR (31 downto 0) := "10111101010011001100110011001101";
    constant ap_const_lv32_3D4CCCCD : STD_LOGIC_VECTOR (31 downto 0) := "00111101010011001100110011001101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in0_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal in0_V_0_vld_in : STD_LOGIC;
    signal in0_V_0_vld_out : STD_LOGIC;
    signal in0_V_0_ack_in : STD_LOGIC;
    signal in0_V_0_ack_out : STD_LOGIC;
    signal in0_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal in0_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal in0_V_0_sel_rd : STD_LOGIC := '0';
    signal in0_V_0_sel_wr : STD_LOGIC := '0';
    signal in0_V_0_sel : STD_LOGIC;
    signal in0_V_0_load_A : STD_LOGIC;
    signal in0_V_0_load_B : STD_LOGIC;
    signal in0_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in0_V_0_state_cmp_full : STD_LOGIC;
    signal in1_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_V_0_vld_in : STD_LOGIC;
    signal in1_V_0_vld_out : STD_LOGIC;
    signal in1_V_0_ack_in : STD_LOGIC;
    signal in1_V_0_ack_out : STD_LOGIC;
    signal in1_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_V_0_sel_rd : STD_LOGIC := '0';
    signal in1_V_0_sel_wr : STD_LOGIC := '0';
    signal in1_V_0_sel : STD_LOGIC;
    signal in1_V_0_load_A : STD_LOGIC;
    signal in1_V_0_load_B : STD_LOGIC;
    signal in1_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in1_V_0_state_cmp_full : STD_LOGIC;
    signal in2_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal in2_V_0_vld_in : STD_LOGIC;
    signal in2_V_0_vld_out : STD_LOGIC;
    signal in2_V_0_ack_in : STD_LOGIC;
    signal in2_V_0_ack_out : STD_LOGIC;
    signal in2_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal in2_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal in2_V_0_sel_rd : STD_LOGIC := '0';
    signal in2_V_0_sel_wr : STD_LOGIC := '0';
    signal in2_V_0_sel : STD_LOGIC;
    signal in2_V_0_load_A : STD_LOGIC;
    signal in2_V_0_load_B : STD_LOGIC;
    signal in2_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in2_V_0_state_cmp_full : STD_LOGIC;
    signal in3_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal in3_V_0_vld_in : STD_LOGIC;
    signal in3_V_0_vld_out : STD_LOGIC;
    signal in3_V_0_ack_in : STD_LOGIC;
    signal in3_V_0_ack_out : STD_LOGIC;
    signal in3_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal in3_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal in3_V_0_sel_rd : STD_LOGIC := '0';
    signal in3_V_0_sel_wr : STD_LOGIC := '0';
    signal in3_V_0_sel : STD_LOGIC;
    signal in3_V_0_load_A : STD_LOGIC;
    signal in3_V_0_load_B : STD_LOGIC;
    signal in3_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in3_V_0_state_cmp_full : STD_LOGIC;
    signal out_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal out_V_1_vld_in : STD_LOGIC;
    signal out_V_1_vld_out : STD_LOGIC;
    signal out_V_1_ack_in : STD_LOGIC;
    signal out_V_1_ack_out : STD_LOGIC;
    signal out_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal out_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal out_V_1_sel_rd : STD_LOGIC := '0';
    signal out_V_1_sel_wr : STD_LOGIC := '0';
    signal out_V_1_sel : STD_LOGIC;
    signal out_V_1_load_A : STD_LOGIC;
    signal out_V_1_load_B : STD_LOGIC;
    signal out_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_V_1_state_cmp_full : STD_LOGIC;
    signal in0_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal or_cond_reg_423 : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal or_cond1_reg_442 : STD_LOGIC_VECTOR (0 downto 0);
    signal in2_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal or_cond2_reg_461 : STD_LOGIC_VECTOR (0 downto 0);
    signal in3_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal or_cond3_reg_480 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_197 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal grp_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_389 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_394 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal or_cond_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal tmp_12_reg_432 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_437 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state5 : BOOLEAN;
    signal tmp_26_reg_451 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_reg_456 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state7 : BOOLEAN;
    signal tmp_33_reg_470 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_reg_475 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_165_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_484 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_170_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_489 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_494 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_180_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_reg_499 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_160_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_reg_504 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_107 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_119 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_131 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_phi_fu_147_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_143 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state9 : BOOLEAN;
    signal grp_fu_156_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_156_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_185_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_191_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal lev0_to_int_fu_203_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_206_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_216_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lev1_to_int_fu_248_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_251_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_261_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs2_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lev2_to_int_fu_293_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_296_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_306_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs4_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lev3_to_int_fu_338_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_341_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_fu_351_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs6_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs6_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_156_ce : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_165_ce : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_170_ce : STD_LOGIC;
    signal grp_fu_175_ce : STD_LOGIC;
    signal grp_fu_180_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);

    component mixer_fadd_32ns_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mixer_fmul_32ns_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mixer_fcmp_32ns_3dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    mixer_fadd_32ns_3bkb_U1 : component mixer_fadd_32ns_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_156_p0,
        din1 => grp_fu_156_p1,
        ce => grp_fu_156_ce,
        dout => grp_fu_156_p2);

    mixer_fadd_32ns_3bkb_U2 : component mixer_fadd_32ns_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_18_reg_494,
        din1 => tmp_19_reg_499,
        ce => ap_const_logic_1,
        dout => grp_fu_160_p2);

    mixer_fmul_32ns_3cud_U3 : component mixer_fmul_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_7_reg_107,
        din1 => lev0,
        ce => grp_fu_165_ce,
        dout => grp_fu_165_p2);

    mixer_fmul_32ns_3cud_U4 : component mixer_fmul_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_s_reg_119,
        din1 => lev1,
        ce => grp_fu_170_ce,
        dout => grp_fu_170_p2);

    mixer_fmul_32ns_3cud_U5 : component mixer_fmul_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_10_reg_131,
        din1 => lev2,
        ce => grp_fu_175_ce,
        dout => grp_fu_175_p2);

    mixer_fmul_32ns_3cud_U6 : component mixer_fmul_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_14_phi_fu_147_p4,
        din1 => lev3,
        ce => grp_fu_180_ce,
        dout => grp_fu_180_p2);

    mixer_fcmp_32ns_3dEe_U7 : component mixer_fcmp_32ns_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_185_p0,
        din1 => ap_const_lv32_BD4CCCCD,
        opcode => ap_const_lv5_4,
        dout => grp_fu_185_p2);

    mixer_fcmp_32ns_3dEe_U8 : component mixer_fcmp_32ns_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_191_p0,
        din1 => ap_const_lv32_3D4CCCCD,
        opcode => ap_const_lv5_2,
        dout => grp_fu_191_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (out_V_1_ack_in = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    in0_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in0_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in0_V_0_ack_out) and (ap_const_logic_1 = in0_V_0_vld_out))) then 
                                        in0_V_0_sel_rd <= not(in0_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in0_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in0_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in0_V_0_vld_in) and (ap_const_logic_1 = in0_V_0_ack_in))) then 
                                        in0_V_0_sel_wr <= not(in0_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in0_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in0_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = in0_V_0_vld_in) and (ap_const_logic_1 = in0_V_0_ack_out) and (in0_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = in0_V_0_vld_in) and (in0_V_0_state = ap_const_lv2_2)))) then 
                    in0_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = in0_V_0_vld_in) and (ap_const_logic_0 = in0_V_0_ack_out) and (in0_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = in0_V_0_ack_out) and (in0_V_0_state = ap_const_lv2_1)))) then 
                    in0_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = in0_V_0_vld_in) and (in0_V_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = in0_V_0_ack_out) and (in0_V_0_state = ap_const_lv2_1)) or ((in0_V_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = in0_V_0_vld_in) and (ap_const_logic_0 = in0_V_0_ack_out))) and not(((ap_const_logic_0 = in0_V_0_vld_in) and (ap_const_logic_1 = in0_V_0_ack_out)))))) then 
                    in0_V_0_state <= ap_const_lv2_3;
                else 
                    in0_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in1_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in1_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in1_V_0_ack_out) and (ap_const_logic_1 = in1_V_0_vld_out))) then 
                                        in1_V_0_sel_rd <= not(in1_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in1_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in1_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in1_V_0_vld_in) and (ap_const_logic_1 = in1_V_0_ack_in))) then 
                                        in1_V_0_sel_wr <= not(in1_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in1_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in1_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = in1_V_0_vld_in) and (ap_const_logic_1 = in1_V_0_ack_out) and (ap_const_lv2_3 = in1_V_0_state)) or ((ap_const_logic_0 = in1_V_0_vld_in) and (ap_const_lv2_2 = in1_V_0_state)))) then 
                    in1_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = in1_V_0_vld_in) and (ap_const_logic_0 = in1_V_0_ack_out) and (ap_const_lv2_3 = in1_V_0_state)) or ((ap_const_logic_0 = in1_V_0_ack_out) and (ap_const_lv2_1 = in1_V_0_state)))) then 
                    in1_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = in1_V_0_vld_in) and (ap_const_lv2_2 = in1_V_0_state)) or ((ap_const_logic_1 = in1_V_0_ack_out) and (ap_const_lv2_1 = in1_V_0_state)) or ((ap_const_lv2_3 = in1_V_0_state) and not(((ap_const_logic_1 = in1_V_0_vld_in) and (ap_const_logic_0 = in1_V_0_ack_out))) and not(((ap_const_logic_0 = in1_V_0_vld_in) and (ap_const_logic_1 = in1_V_0_ack_out)))))) then 
                    in1_V_0_state <= ap_const_lv2_3;
                else 
                    in1_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in2_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in2_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in2_V_0_ack_out) and (ap_const_logic_1 = in2_V_0_vld_out))) then 
                                        in2_V_0_sel_rd <= not(in2_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in2_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in2_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in2_V_0_vld_in) and (ap_const_logic_1 = in2_V_0_ack_in))) then 
                                        in2_V_0_sel_wr <= not(in2_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in2_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in2_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = in2_V_0_vld_in) and (ap_const_logic_1 = in2_V_0_ack_out) and (ap_const_lv2_3 = in2_V_0_state)) or ((ap_const_logic_0 = in2_V_0_vld_in) and (ap_const_lv2_2 = in2_V_0_state)))) then 
                    in2_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = in2_V_0_vld_in) and (ap_const_logic_0 = in2_V_0_ack_out) and (ap_const_lv2_3 = in2_V_0_state)) or ((ap_const_logic_0 = in2_V_0_ack_out) and (ap_const_lv2_1 = in2_V_0_state)))) then 
                    in2_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = in2_V_0_vld_in) and (ap_const_lv2_2 = in2_V_0_state)) or ((ap_const_logic_1 = in2_V_0_ack_out) and (ap_const_lv2_1 = in2_V_0_state)) or ((ap_const_lv2_3 = in2_V_0_state) and not(((ap_const_logic_1 = in2_V_0_vld_in) and (ap_const_logic_0 = in2_V_0_ack_out))) and not(((ap_const_logic_0 = in2_V_0_vld_in) and (ap_const_logic_1 = in2_V_0_ack_out)))))) then 
                    in2_V_0_state <= ap_const_lv2_3;
                else 
                    in2_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in3_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in3_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in3_V_0_ack_out) and (ap_const_logic_1 = in3_V_0_vld_out))) then 
                                        in3_V_0_sel_rd <= not(in3_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in3_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in3_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in3_V_0_vld_in) and (ap_const_logic_1 = in3_V_0_ack_in))) then 
                                        in3_V_0_sel_wr <= not(in3_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in3_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in3_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = in3_V_0_vld_in) and (ap_const_logic_1 = in3_V_0_ack_out) and (ap_const_lv2_3 = in3_V_0_state)) or ((ap_const_logic_0 = in3_V_0_vld_in) and (ap_const_lv2_2 = in3_V_0_state)))) then 
                    in3_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = in3_V_0_vld_in) and (ap_const_logic_0 = in3_V_0_ack_out) and (ap_const_lv2_3 = in3_V_0_state)) or ((ap_const_logic_0 = in3_V_0_ack_out) and (ap_const_lv2_1 = in3_V_0_state)))) then 
                    in3_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = in3_V_0_vld_in) and (ap_const_lv2_2 = in3_V_0_state)) or ((ap_const_logic_1 = in3_V_0_ack_out) and (ap_const_lv2_1 = in3_V_0_state)) or ((ap_const_lv2_3 = in3_V_0_state) and not(((ap_const_logic_1 = in3_V_0_vld_in) and (ap_const_logic_0 = in3_V_0_ack_out))) and not(((ap_const_logic_0 = in3_V_0_vld_in) and (ap_const_logic_1 = in3_V_0_ack_out)))))) then 
                    in3_V_0_state <= ap_const_lv2_3;
                else 
                    in3_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_V_1_ack_out) and (ap_const_logic_1 = out_V_1_vld_out))) then 
                                        out_V_1_sel_rd <= not(out_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_V_1_vld_in) and (ap_const_logic_1 = out_V_1_ack_in))) then 
                                        out_V_1_sel_wr <= not(out_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = out_V_1_vld_in) and (ap_const_logic_1 = out_V_1_ack_out) and (ap_const_lv2_3 = out_V_1_state)) or ((ap_const_logic_0 = out_V_1_vld_in) and (ap_const_lv2_2 = out_V_1_state)))) then 
                    out_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = out_V_1_vld_in) and (ap_const_logic_0 = out_V_1_ack_out) and (ap_const_lv2_3 = out_V_1_state)) or ((ap_const_logic_0 = out_V_1_ack_out) and (ap_const_lv2_1 = out_V_1_state)))) then 
                    out_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = out_V_1_vld_in) and (ap_const_lv2_2 = out_V_1_state)) or ((ap_const_logic_1 = out_V_1_ack_out) and (ap_const_lv2_1 = out_V_1_state)) or ((ap_const_lv2_3 = out_V_1_state) and not(((ap_const_logic_1 = out_V_1_vld_in) and (ap_const_logic_0 = out_V_1_ack_out))) and not(((ap_const_logic_0 = out_V_1_vld_in) and (ap_const_logic_1 = out_V_1_ack_out)))))) then 
                    out_V_1_state <= ap_const_lv2_3;
                else 
                    out_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    tmp_10_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = or_cond2_fu_332_p2))) then 
                tmp_10_reg_131 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = or_cond2_reg_461) and not(((ap_const_lv1_1 = or_cond2_reg_461) and (ap_const_logic_0 = in2_V_0_vld_out))))) then 
                tmp_10_reg_131 <= in2_V_0_data_out;
            end if; 
        end if;
    end process;

    tmp_14_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = or_cond3_fu_377_p2))) then 
                tmp_14_reg_143 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = or_cond3_reg_480) and not(((ap_const_lv1_1 = or_cond3_reg_480) and (ap_const_logic_0 = in3_V_0_vld_out))))) then 
                tmp_14_reg_143 <= in3_V_0_data_out;
            end if; 
        end if;
    end process;

    tmp_7_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = or_cond_fu_242_p2))) then 
                tmp_7_reg_107 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = or_cond_reg_423) and not(((ap_const_lv1_1 = or_cond_reg_423) and (ap_const_logic_0 = in0_V_0_vld_out))))) then 
                tmp_7_reg_107 <= in0_V_0_data_out;
            end if; 
        end if;
    end process;

    tmp_s_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = or_cond1_fu_287_p2))) then 
                tmp_s_reg_119 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = or_cond1_reg_442) and not(((ap_const_lv1_1 = or_cond1_reg_442) and (ap_const_logic_0 = in1_V_0_vld_out))))) then 
                tmp_s_reg_119 <= in1_V_0_data_out;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in0_V_0_load_A)) then
                in0_V_0_payload_A <= in0_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in0_V_0_load_B)) then
                in0_V_0_payload_B <= in0_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in1_V_0_load_A)) then
                in1_V_0_payload_A <= in1_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in1_V_0_load_B)) then
                in1_V_0_payload_B <= in1_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in2_V_0_load_A)) then
                in2_V_0_payload_A <= in2_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in2_V_0_load_B)) then
                in2_V_0_payload_B <= in2_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in3_V_0_load_A)) then
                in3_V_0_payload_A <= in3_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in3_V_0_load_B)) then
                in3_V_0_payload_B <= in3_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                or_cond1_reg_442 <= or_cond1_fu_287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                or_cond2_reg_461 <= or_cond2_fu_332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                or_cond3_reg_480 <= or_cond3_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                or_cond_reg_423 <= or_cond_fu_242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_V_1_load_A)) then
                out_V_1_payload_A <= grp_fu_156_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_V_1_load_B)) then
                out_V_1_payload_B <= grp_fu_156_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_const_logic_1 = ap_CS_fsm_state22) and (out_V_1_ack_in = ap_const_logic_1)))) then
                reg_197 <= grp_fu_156_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and not(((ap_const_lv1_1 = or_cond_reg_423) and (ap_const_logic_0 = in0_V_0_vld_out))))) then
                tmp_12_reg_432 <= grp_fu_185_p2;
                tmp_13_reg_437 <= grp_fu_191_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_15_reg_484 <= grp_fu_165_p2;
                tmp_16_reg_489 <= grp_fu_170_p2;
                tmp_18_reg_494 <= grp_fu_175_p2;
                tmp_19_reg_499 <= grp_fu_180_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then
                tmp_1_reg_394 <= grp_fu_191_p2;
                tmp_9_reg_389 <= grp_fu_185_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_20_reg_504 <= grp_fu_160_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and not(((ap_const_lv1_1 = or_cond1_reg_442) and (ap_const_logic_0 = in1_V_0_vld_out))))) then
                tmp_26_reg_451 <= grp_fu_185_p2;
                tmp_27_reg_456 <= grp_fu_191_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and not(((ap_const_lv1_1 = or_cond2_reg_461) and (ap_const_logic_0 = in2_V_0_vld_out))))) then
                tmp_33_reg_470 <= grp_fu_185_p2;
                tmp_34_reg_475 <= grp_fu_191_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, in0_V_0_vld_out, in1_V_0_vld_out, in2_V_0_vld_out, in3_V_0_vld_out, out_V_1_ack_in, ap_CS_fsm_state3, or_cond_reg_423, ap_CS_fsm_state5, or_cond1_reg_442, ap_CS_fsm_state7, or_cond2_reg_461, ap_CS_fsm_state9, or_cond3_reg_480, ap_CS_fsm_state22, ap_CS_fsm_state23)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and not(((ap_const_lv1_1 = or_cond_reg_423) and (ap_const_logic_0 = in0_V_0_vld_out))))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and not(((ap_const_lv1_1 = or_cond1_reg_442) and (ap_const_logic_0 = in1_V_0_vld_out))))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and not(((ap_const_lv1_1 = or_cond2_reg_461) and (ap_const_logic_0 = in2_V_0_vld_out))))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and not(((ap_const_lv1_1 = or_cond3_reg_480) and (ap_const_logic_0 = in3_V_0_vld_out))))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (out_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (out_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_assign_proc : process(in0_V_0_vld_out, or_cond_reg_423)
    begin
                ap_block_state3 <= ((ap_const_lv1_1 = or_cond_reg_423) and (ap_const_logic_0 = in0_V_0_vld_out));
    end process;


    ap_block_state5_assign_proc : process(in1_V_0_vld_out, or_cond1_reg_442)
    begin
                ap_block_state5 <= ((ap_const_lv1_1 = or_cond1_reg_442) and (ap_const_logic_0 = in1_V_0_vld_out));
    end process;


    ap_block_state7_assign_proc : process(in2_V_0_vld_out, or_cond2_reg_461)
    begin
                ap_block_state7 <= ((ap_const_lv1_1 = or_cond2_reg_461) and (ap_const_logic_0 = in2_V_0_vld_out));
    end process;


    ap_block_state9_assign_proc : process(in3_V_0_vld_out, or_cond3_reg_480)
    begin
                ap_block_state9 <= ((ap_const_lv1_1 = or_cond3_reg_480) and (ap_const_logic_0 = in3_V_0_vld_out));
    end process;


    ap_done_assign_proc : process(ap_done_reg, out_V_1_ack_in, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) and (out_V_1_ack_in = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(out_V_1_ack_in, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) and (out_V_1_ack_in = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_156_ce_assign_proc : process(out_V_1_ack_in, ap_CS_fsm_state22, ap_CS_fsm_state17, ap_CS_fsm_state13, ap_CS_fsm_state18, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_const_logic_1 = ap_CS_fsm_state22) and (out_V_1_ack_in = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            grp_fu_156_ce <= ap_const_logic_1;
        else 
            grp_fu_156_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_156_p0_assign_proc : process(reg_197, tmp_15_reg_484, ap_CS_fsm_state13, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_156_p0 <= reg_197;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_156_p0 <= tmp_15_reg_484;
        else 
            grp_fu_156_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_156_p1_assign_proc : process(tmp_16_reg_489, tmp_20_reg_504, ap_CS_fsm_state13, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_156_p1 <= tmp_20_reg_504;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_156_p1 <= tmp_16_reg_489;
        else 
            grp_fu_156_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_165_ce_assign_proc : process(in3_V_0_vld_out, ap_CS_fsm_state9, or_cond3_reg_480, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state9) and not(((ap_const_lv1_1 = or_cond3_reg_480) and (ap_const_logic_0 = in3_V_0_vld_out)))) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_165_ce <= ap_const_logic_1;
        else 
            grp_fu_165_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_170_ce_assign_proc : process(in3_V_0_vld_out, ap_CS_fsm_state9, or_cond3_reg_480, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state9) and not(((ap_const_lv1_1 = or_cond3_reg_480) and (ap_const_logic_0 = in3_V_0_vld_out)))) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_170_ce <= ap_const_logic_1;
        else 
            grp_fu_170_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_175_ce_assign_proc : process(in3_V_0_vld_out, ap_CS_fsm_state9, or_cond3_reg_480, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state9) and not(((ap_const_lv1_1 = or_cond3_reg_480) and (ap_const_logic_0 = in3_V_0_vld_out)))) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_175_ce <= ap_const_logic_1;
        else 
            grp_fu_175_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_180_ce_assign_proc : process(in3_V_0_vld_out, ap_CS_fsm_state9, or_cond3_reg_480, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state9) and not(((ap_const_lv1_1 = or_cond3_reg_480) and (ap_const_logic_0 = in3_V_0_vld_out)))) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_180_ce <= ap_const_logic_1;
        else 
            grp_fu_180_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_185_p0_assign_proc : process(ap_CS_fsm_state1, lev0, lev1, lev2, lev3, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_185_p0 <= lev3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_185_p0 <= lev2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_185_p0 <= lev1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_185_p0 <= lev0;
        else 
            grp_fu_185_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_191_p0_assign_proc : process(ap_CS_fsm_state1, lev0, lev1, lev2, lev3, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_191_p0 <= lev3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_191_p0 <= lev2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_191_p0 <= lev1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_191_p0 <= lev0;
        else 
            grp_fu_191_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    in0_V_0_ack_in <= in0_V_0_state(1);

    in0_V_0_ack_out_assign_proc : process(in0_V_0_vld_out, ap_CS_fsm_state3, or_cond_reg_423)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = or_cond_reg_423) and not(((ap_const_lv1_1 = or_cond_reg_423) and (ap_const_logic_0 = in0_V_0_vld_out))))) then 
            in0_V_0_ack_out <= ap_const_logic_1;
        else 
            in0_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in0_V_0_data_out_assign_proc : process(in0_V_0_payload_A, in0_V_0_payload_B, in0_V_0_sel)
    begin
        if ((ap_const_logic_1 = in0_V_0_sel)) then 
            in0_V_0_data_out <= in0_V_0_payload_B;
        else 
            in0_V_0_data_out <= in0_V_0_payload_A;
        end if; 
    end process;

    in0_V_0_load_A <= (in0_V_0_state_cmp_full and not(in0_V_0_sel_wr));
    in0_V_0_load_B <= (in0_V_0_sel_wr and in0_V_0_state_cmp_full);
    in0_V_0_sel <= in0_V_0_sel_rd;
    in0_V_0_state_cmp_full <= '0' when (in0_V_0_state = ap_const_lv2_1) else '1';
    in0_V_0_vld_in <= in0_V_TVALID;
    in0_V_0_vld_out <= in0_V_0_state(0);

    in0_V_TDATA_blk_n_assign_proc : process(in0_V_0_state, ap_CS_fsm_state3, or_cond_reg_423)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = or_cond_reg_423))) then 
            in0_V_TDATA_blk_n <= in0_V_0_state(0);
        else 
            in0_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in0_V_TREADY <= in0_V_0_state(1);
    in1_V_0_ack_in <= in1_V_0_state(1);

    in1_V_0_ack_out_assign_proc : process(in1_V_0_vld_out, ap_CS_fsm_state5, or_cond1_reg_442)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = or_cond1_reg_442) and not(((ap_const_lv1_1 = or_cond1_reg_442) and (ap_const_logic_0 = in1_V_0_vld_out))))) then 
            in1_V_0_ack_out <= ap_const_logic_1;
        else 
            in1_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in1_V_0_data_out_assign_proc : process(in1_V_0_payload_A, in1_V_0_payload_B, in1_V_0_sel)
    begin
        if ((ap_const_logic_1 = in1_V_0_sel)) then 
            in1_V_0_data_out <= in1_V_0_payload_B;
        else 
            in1_V_0_data_out <= in1_V_0_payload_A;
        end if; 
    end process;

    in1_V_0_load_A <= (in1_V_0_state_cmp_full and not(in1_V_0_sel_wr));
    in1_V_0_load_B <= (in1_V_0_sel_wr and in1_V_0_state_cmp_full);
    in1_V_0_sel <= in1_V_0_sel_rd;
    in1_V_0_state_cmp_full <= '0' when (in1_V_0_state = ap_const_lv2_1) else '1';
    in1_V_0_vld_in <= in1_V_TVALID;
    in1_V_0_vld_out <= in1_V_0_state(0);

    in1_V_TDATA_blk_n_assign_proc : process(in1_V_0_state, ap_CS_fsm_state5, or_cond1_reg_442)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = or_cond1_reg_442))) then 
            in1_V_TDATA_blk_n <= in1_V_0_state(0);
        else 
            in1_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in1_V_TREADY <= in1_V_0_state(1);
    in2_V_0_ack_in <= in2_V_0_state(1);

    in2_V_0_ack_out_assign_proc : process(in2_V_0_vld_out, ap_CS_fsm_state7, or_cond2_reg_461)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = or_cond2_reg_461) and not(((ap_const_lv1_1 = or_cond2_reg_461) and (ap_const_logic_0 = in2_V_0_vld_out))))) then 
            in2_V_0_ack_out <= ap_const_logic_1;
        else 
            in2_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in2_V_0_data_out_assign_proc : process(in2_V_0_payload_A, in2_V_0_payload_B, in2_V_0_sel)
    begin
        if ((ap_const_logic_1 = in2_V_0_sel)) then 
            in2_V_0_data_out <= in2_V_0_payload_B;
        else 
            in2_V_0_data_out <= in2_V_0_payload_A;
        end if; 
    end process;

    in2_V_0_load_A <= (in2_V_0_state_cmp_full and not(in2_V_0_sel_wr));
    in2_V_0_load_B <= (in2_V_0_sel_wr and in2_V_0_state_cmp_full);
    in2_V_0_sel <= in2_V_0_sel_rd;
    in2_V_0_state_cmp_full <= '0' when (in2_V_0_state = ap_const_lv2_1) else '1';
    in2_V_0_vld_in <= in2_V_TVALID;
    in2_V_0_vld_out <= in2_V_0_state(0);

    in2_V_TDATA_blk_n_assign_proc : process(in2_V_0_state, ap_CS_fsm_state7, or_cond2_reg_461)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = or_cond2_reg_461))) then 
            in2_V_TDATA_blk_n <= in2_V_0_state(0);
        else 
            in2_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in2_V_TREADY <= in2_V_0_state(1);
    in3_V_0_ack_in <= in3_V_0_state(1);

    in3_V_0_ack_out_assign_proc : process(in3_V_0_vld_out, ap_CS_fsm_state9, or_cond3_reg_480)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = or_cond3_reg_480) and not(((ap_const_lv1_1 = or_cond3_reg_480) and (ap_const_logic_0 = in3_V_0_vld_out))))) then 
            in3_V_0_ack_out <= ap_const_logic_1;
        else 
            in3_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in3_V_0_data_out_assign_proc : process(in3_V_0_payload_A, in3_V_0_payload_B, in3_V_0_sel)
    begin
        if ((ap_const_logic_1 = in3_V_0_sel)) then 
            in3_V_0_data_out <= in3_V_0_payload_B;
        else 
            in3_V_0_data_out <= in3_V_0_payload_A;
        end if; 
    end process;

    in3_V_0_load_A <= (in3_V_0_state_cmp_full and not(in3_V_0_sel_wr));
    in3_V_0_load_B <= (in3_V_0_sel_wr and in3_V_0_state_cmp_full);
    in3_V_0_sel <= in3_V_0_sel_rd;
    in3_V_0_state_cmp_full <= '0' when (in3_V_0_state = ap_const_lv2_1) else '1';
    in3_V_0_vld_in <= in3_V_TVALID;
    in3_V_0_vld_out <= in3_V_0_state(0);

    in3_V_TDATA_blk_n_assign_proc : process(in3_V_0_state, ap_CS_fsm_state9, or_cond3_reg_480)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = or_cond3_reg_480))) then 
            in3_V_TDATA_blk_n <= in3_V_0_state(0);
        else 
            in3_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in3_V_TREADY <= in3_V_0_state(1);
    lev0_to_int_fu_203_p1 <= lev0;
    lev1_to_int_fu_248_p1 <= lev1;
    lev2_to_int_fu_293_p1 <= lev2;
    lev3_to_int_fu_338_p1 <= lev3;
    notlhs2_fu_265_p2 <= "0" when (tmp_4_fu_251_p4 = ap_const_lv8_FF) else "1";
    notlhs4_fu_310_p2 <= "0" when (tmp_23_fu_296_p4 = ap_const_lv8_FF) else "1";
    notlhs6_fu_355_p2 <= "0" when (tmp_30_fu_341_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_220_p2 <= "0" when (tmp_5_fu_206_p4 = ap_const_lv8_FF) else "1";
    notrhs2_fu_271_p2 <= "1" when (tmp_6_fu_261_p1 = ap_const_lv23_0) else "0";
    notrhs4_fu_316_p2 <= "1" when (tmp_24_fu_306_p1 = ap_const_lv23_0) else "0";
    notrhs6_fu_361_p2 <= "1" when (tmp_31_fu_351_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_226_p2 <= "1" when (tmp_fu_216_p1 = ap_const_lv23_0) else "0";
    or_cond1_fu_287_p2 <= (tmp_11_fu_277_p2 and tmp_21_fu_283_p2);
    or_cond2_fu_332_p2 <= (tmp_25_fu_322_p2 and tmp_28_fu_328_p2);
    or_cond3_fu_377_p2 <= (tmp_32_fu_367_p2 and tmp_35_fu_373_p2);
    or_cond_fu_242_p2 <= (tmp_8_fu_232_p2 and tmp_2_fu_238_p2);
    out_V_1_ack_in <= out_V_1_state(1);
    out_V_1_ack_out <= out_V_TREADY;

    out_V_1_data_out_assign_proc : process(out_V_1_payload_A, out_V_1_payload_B, out_V_1_sel)
    begin
        if ((ap_const_logic_1 = out_V_1_sel)) then 
            out_V_1_data_out <= out_V_1_payload_B;
        else 
            out_V_1_data_out <= out_V_1_payload_A;
        end if; 
    end process;

    out_V_1_load_A <= (out_V_1_state_cmp_full and not(out_V_1_sel_wr));
    out_V_1_load_B <= (out_V_1_sel_wr and out_V_1_state_cmp_full);
    out_V_1_sel <= out_V_1_sel_rd;
    out_V_1_state_cmp_full <= '0' when (out_V_1_state = ap_const_lv2_1) else '1';

    out_V_1_vld_in_assign_proc : process(out_V_1_ack_in, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) and (out_V_1_ack_in = ap_const_logic_1))) then 
            out_V_1_vld_in <= ap_const_logic_1;
        else 
            out_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_V_1_vld_out <= out_V_1_state(0);
    out_V_TDATA <= out_V_1_data_out;

    out_V_TDATA_blk_n_assign_proc : process(out_V_1_state, ap_CS_fsm_state22, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            out_V_TDATA_blk_n <= out_V_1_state(1);
        else 
            out_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_TVALID <= out_V_1_state(0);
    tmp_11_fu_277_p2 <= (notrhs2_fu_271_p2 or notlhs2_fu_265_p2);

    tmp_14_phi_fu_147_p4_assign_proc : process(in3_V_0_data_out, ap_CS_fsm_state9, or_cond3_reg_480, tmp_14_reg_143)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = or_cond3_reg_480))) then 
            tmp_14_phi_fu_147_p4 <= in3_V_0_data_out;
        else 
            tmp_14_phi_fu_147_p4 <= tmp_14_reg_143;
        end if; 
    end process;

    tmp_21_fu_283_p2 <= (tmp_12_reg_432 or tmp_13_reg_437);
    tmp_23_fu_296_p4 <= lev2_to_int_fu_293_p1(30 downto 23);
    tmp_24_fu_306_p1 <= lev2_to_int_fu_293_p1(23 - 1 downto 0);
    tmp_25_fu_322_p2 <= (notrhs4_fu_316_p2 or notlhs4_fu_310_p2);
    tmp_28_fu_328_p2 <= (tmp_26_reg_451 or tmp_27_reg_456);
    tmp_2_fu_238_p2 <= (tmp_9_reg_389 or tmp_1_reg_394);
    tmp_30_fu_341_p4 <= lev3_to_int_fu_338_p1(30 downto 23);
    tmp_31_fu_351_p1 <= lev3_to_int_fu_338_p1(23 - 1 downto 0);
    tmp_32_fu_367_p2 <= (notrhs6_fu_361_p2 or notlhs6_fu_355_p2);
    tmp_35_fu_373_p2 <= (tmp_33_reg_470 or tmp_34_reg_475);
    tmp_4_fu_251_p4 <= lev1_to_int_fu_248_p1(30 downto 23);
    tmp_5_fu_206_p4 <= lev0_to_int_fu_203_p1(30 downto 23);
    tmp_6_fu_261_p1 <= lev1_to_int_fu_248_p1(23 - 1 downto 0);
    tmp_8_fu_232_p2 <= (notrhs_fu_226_p2 or notlhs_fu_220_p2);
    tmp_fu_216_p1 <= lev0_to_int_fu_203_p1(23 - 1 downto 0);
end behav;
