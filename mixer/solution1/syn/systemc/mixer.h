// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mixer_HH_
#define _mixer_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Block_codeRepl1_proc.h"
#include "mixer_CTRL_BUS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CTRL_BUS_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_CTRL_BUS_DATA_WIDTH = 32>
struct mixer : public sc_module {
    // Port declarations 34
    sc_in< sc_logic > s_axi_CTRL_BUS_AWVALID;
    sc_out< sc_logic > s_axi_CTRL_BUS_AWREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_ADDR_WIDTH> > s_axi_CTRL_BUS_AWADDR;
    sc_in< sc_logic > s_axi_CTRL_BUS_WVALID;
    sc_out< sc_logic > s_axi_CTRL_BUS_WREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_DATA_WIDTH> > s_axi_CTRL_BUS_WDATA;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_DATA_WIDTH/8> > s_axi_CTRL_BUS_WSTRB;
    sc_in< sc_logic > s_axi_CTRL_BUS_ARVALID;
    sc_out< sc_logic > s_axi_CTRL_BUS_ARREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_ADDR_WIDTH> > s_axi_CTRL_BUS_ARADDR;
    sc_out< sc_logic > s_axi_CTRL_BUS_RVALID;
    sc_in< sc_logic > s_axi_CTRL_BUS_RREADY;
    sc_out< sc_uint<C_S_AXI_CTRL_BUS_DATA_WIDTH> > s_axi_CTRL_BUS_RDATA;
    sc_out< sc_lv<2> > s_axi_CTRL_BUS_RRESP;
    sc_out< sc_logic > s_axi_CTRL_BUS_BVALID;
    sc_in< sc_logic > s_axi_CTRL_BUS_BREADY;
    sc_out< sc_lv<2> > s_axi_CTRL_BUS_BRESP;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<32> > in0_V_TDATA;
    sc_in< sc_lv<32> > in1_V_TDATA;
    sc_in< sc_lv<32> > in2_V_TDATA;
    sc_in< sc_lv<32> > in3_V_TDATA;
    sc_out< sc_lv<32> > out_V_TDATA;
    sc_in< sc_logic > in0_V_TVALID;
    sc_out< sc_logic > in0_V_TREADY;
    sc_in< sc_logic > in1_V_TVALID;
    sc_out< sc_logic > in1_V_TREADY;
    sc_in< sc_logic > in2_V_TVALID;
    sc_out< sc_logic > in2_V_TREADY;
    sc_in< sc_logic > in3_V_TVALID;
    sc_out< sc_logic > in3_V_TREADY;
    sc_out< sc_logic > out_V_TVALID;
    sc_in< sc_logic > out_V_TREADY;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    mixer(sc_module_name name);
    SC_HAS_PROCESS(mixer);

    ~mixer();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    mixer_CTRL_BUS_s_axi<C_S_AXI_CTRL_BUS_ADDR_WIDTH,C_S_AXI_CTRL_BUS_DATA_WIDTH>* mixer_CTRL_BUS_s_axi_U;
    Block_codeRepl1_proc* Block_codeRepl1_proc_U0;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<32> > lev0;
    sc_signal< sc_lv<32> > lev1;
    sc_signal< sc_lv<32> > lev2;
    sc_signal< sc_lv<32> > lev3;
    sc_signal< sc_logic > Block_codeRepl1_proc_U0_ap_start;
    sc_signal< sc_logic > Block_codeRepl1_proc_U0_ap_done;
    sc_signal< sc_logic > Block_codeRepl1_proc_U0_ap_continue;
    sc_signal< sc_logic > Block_codeRepl1_proc_U0_ap_idle;
    sc_signal< sc_logic > Block_codeRepl1_proc_U0_ap_ready;
    sc_signal< sc_logic > Block_codeRepl1_proc_U0_in0_V_TREADY;
    sc_signal< sc_logic > Block_codeRepl1_proc_U0_in1_V_TREADY;
    sc_signal< sc_logic > Block_codeRepl1_proc_U0_in2_V_TREADY;
    sc_signal< sc_logic > Block_codeRepl1_proc_U0_in3_V_TREADY;
    sc_signal< sc_lv<32> > Block_codeRepl1_proc_U0_out_V_TDATA;
    sc_signal< sc_logic > Block_codeRepl1_proc_U0_out_V_TVALID;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > Block_codeRepl1_proc_U0_start_full_n;
    sc_signal< sc_logic > Block_codeRepl1_proc_U0_start_write;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_S_AXI_WSTRB_WIDTH;
    static const int C_S_AXI_ADDR_WIDTH;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_Block_codeRepl1_proc_U0_ap_continue();
    void thread_Block_codeRepl1_proc_U0_ap_start();
    void thread_Block_codeRepl1_proc_U0_start_full_n();
    void thread_Block_codeRepl1_proc_U0_start_write();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_continue();
    void thread_in0_V_TREADY();
    void thread_in1_V_TREADY();
    void thread_in2_V_TREADY();
    void thread_in3_V_TREADY();
    void thread_out_V_TDATA();
    void thread_out_V_TVALID();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
