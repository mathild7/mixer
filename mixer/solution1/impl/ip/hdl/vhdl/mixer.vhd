-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mixer is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in0_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in1_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in2_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in3_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    out_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    in0_V_TVALID : IN STD_LOGIC;
    in0_V_TREADY : OUT STD_LOGIC;
    in1_V_TVALID : IN STD_LOGIC;
    in1_V_TREADY : OUT STD_LOGIC;
    in2_V_TVALID : IN STD_LOGIC;
    in2_V_TREADY : OUT STD_LOGIC;
    in3_V_TVALID : IN STD_LOGIC;
    in3_V_TREADY : OUT STD_LOGIC;
    out_V_TVALID : OUT STD_LOGIC;
    out_V_TREADY : IN STD_LOGIC );
end;


architecture behav of mixer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mixer,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z100ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.789000,HLS_SYN_LAT=22,HLS_SYN_TPT=23,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=1992,HLS_SYN_LUT=3381}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal lev0 : STD_LOGIC_VECTOR (31 downto 0);
    signal lev1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lev2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lev3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_codeRepl1_proc_U0_ap_start : STD_LOGIC;
    signal Block_codeRepl1_proc_U0_ap_done : STD_LOGIC;
    signal Block_codeRepl1_proc_U0_ap_continue : STD_LOGIC;
    signal Block_codeRepl1_proc_U0_ap_idle : STD_LOGIC;
    signal Block_codeRepl1_proc_U0_ap_ready : STD_LOGIC;
    signal Block_codeRepl1_proc_U0_in0_V_TREADY : STD_LOGIC;
    signal Block_codeRepl1_proc_U0_in1_V_TREADY : STD_LOGIC;
    signal Block_codeRepl1_proc_U0_in2_V_TREADY : STD_LOGIC;
    signal Block_codeRepl1_proc_U0_in3_V_TREADY : STD_LOGIC;
    signal Block_codeRepl1_proc_U0_out_V_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_codeRepl1_proc_U0_out_V_TVALID : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal Block_codeRepl1_proc_U0_start_full_n : STD_LOGIC;
    signal Block_codeRepl1_proc_U0_start_write : STD_LOGIC;

    component Block_codeRepl1_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        lev0 : IN STD_LOGIC_VECTOR (31 downto 0);
        in0_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        in0_V_TVALID : IN STD_LOGIC;
        in0_V_TREADY : OUT STD_LOGIC;
        lev1 : IN STD_LOGIC_VECTOR (31 downto 0);
        in1_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        in1_V_TVALID : IN STD_LOGIC;
        in1_V_TREADY : OUT STD_LOGIC;
        lev2 : IN STD_LOGIC_VECTOR (31 downto 0);
        in2_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        in2_V_TVALID : IN STD_LOGIC;
        in2_V_TREADY : OUT STD_LOGIC;
        lev3 : IN STD_LOGIC_VECTOR (31 downto 0);
        in3_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        in3_V_TVALID : IN STD_LOGIC;
        in3_V_TREADY : OUT STD_LOGIC;
        out_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_V_TVALID : OUT STD_LOGIC;
        out_V_TREADY : IN STD_LOGIC );
    end component;


    component mixer_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        lev0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        lev1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        lev2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        lev3 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mixer_CTRL_BUS_s_axi_U : component mixer_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        lev0 => lev0,
        lev1 => lev1,
        lev2 => lev2,
        lev3 => lev3);

    Block_codeRepl1_proc_U0 : component Block_codeRepl1_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_codeRepl1_proc_U0_ap_start,
        ap_done => Block_codeRepl1_proc_U0_ap_done,
        ap_continue => Block_codeRepl1_proc_U0_ap_continue,
        ap_idle => Block_codeRepl1_proc_U0_ap_idle,
        ap_ready => Block_codeRepl1_proc_U0_ap_ready,
        lev0 => lev0,
        in0_V_TDATA => in0_V_TDATA,
        in0_V_TVALID => in0_V_TVALID,
        in0_V_TREADY => Block_codeRepl1_proc_U0_in0_V_TREADY,
        lev1 => lev1,
        in1_V_TDATA => in1_V_TDATA,
        in1_V_TVALID => in1_V_TVALID,
        in1_V_TREADY => Block_codeRepl1_proc_U0_in1_V_TREADY,
        lev2 => lev2,
        in2_V_TDATA => in2_V_TDATA,
        in2_V_TVALID => in2_V_TVALID,
        in2_V_TREADY => Block_codeRepl1_proc_U0_in2_V_TREADY,
        lev3 => lev3,
        in3_V_TDATA => in3_V_TDATA,
        in3_V_TVALID => in3_V_TVALID,
        in3_V_TREADY => Block_codeRepl1_proc_U0_in3_V_TREADY,
        out_V_TDATA => Block_codeRepl1_proc_U0_out_V_TDATA,
        out_V_TVALID => Block_codeRepl1_proc_U0_out_V_TVALID,
        out_V_TREADY => out_V_TREADY);




    Block_codeRepl1_proc_U0_ap_continue <= ap_const_logic_1;
    Block_codeRepl1_proc_U0_ap_start <= ap_const_logic_1;
    Block_codeRepl1_proc_U0_start_full_n <= ap_const_logic_0;
    Block_codeRepl1_proc_U0_start_write <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    in0_V_TREADY <= Block_codeRepl1_proc_U0_in0_V_TREADY;
    in1_V_TREADY <= Block_codeRepl1_proc_U0_in1_V_TREADY;
    in2_V_TREADY <= Block_codeRepl1_proc_U0_in2_V_TREADY;
    in3_V_TREADY <= Block_codeRepl1_proc_U0_in3_V_TREADY;
    out_V_TDATA <= Block_codeRepl1_proc_U0_out_V_TDATA;
    out_V_TVALID <= Block_codeRepl1_proc_U0_out_V_TVALID;
end behav;
